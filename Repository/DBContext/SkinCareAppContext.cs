// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Repository.Models;

public partial class SkinCareAppContext : DbContext
{
    public SkinCareAppContext(DbContextOptions<SkinCareAppContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AiAnalysisLog> AiAnalysisLogs { get; set; }

    public virtual DbSet<AiAnalysisProduct> AiAnalysisProducts { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<BlogComment> BlogComments { get; set; }

    public virtual DbSet<DailyRoutine> DailyRoutines { get; set; }

    public virtual DbSet<DailyRoutineProduct> DailyRoutineProducts { get; set; }

    public virtual DbSet<PaymentLog> PaymentLogs { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductCategoryMapping> ProductCategoryMappings { get; set; }

    public virtual DbSet<SuggestedProduct> SuggestedProducts { get; set; }

    public virtual DbSet<TempUser> TempUsers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserVip> UserVips { get; set; }

    public virtual DbSet<VipPackage> VipPackages { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AiAnalysisLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AI_Analy__3214EC073509E6B9");

            entity.ToTable("AI_Analysis_Logs");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.AiAnalysisLogs)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__AI_Analys__UserI__6A30C649");
        });

        modelBuilder.Entity<AiAnalysisProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AI_Analy__3214EC074970086C");

            entity.ToTable("AI_Analysis_Products");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AianalysisId).HasColumnName("AIAnalysisId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Aianalysis).WithMany(p => p.AiAnalysisProducts)
                .HasForeignKey(d => d.AianalysisId)
                .HasConstraintName("FK__AI_Analys__AIAna__08B54D69");

            entity.HasOne(d => d.Product).WithMany(p => p.AiAnalysisProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__AI_Analys__Produ__09A971A2");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Blogs__3214EC070A0A3F46");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExternalProductLink).HasMaxLength(255);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<BlogComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Blog_Com__3214EC0737B69723");

            entity.ToTable("Blog_Comments");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CommentText).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Blog).WithMany(p => p.BlogComments)
                .HasForeignKey(d => d.BlogId)
                .HasConstraintName("FK__Blog_Comm__BlogI__787EE5A0");

            entity.HasOne(d => d.User).WithMany(p => p.BlogComments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Blog_Comm__UserI__797309D9");
        });

        modelBuilder.Entity<DailyRoutine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Daily_Ro__3214EC07ACFBFCB5");

            entity.ToTable("Daily_Routine");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.DailyRoutines)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Daily_Rou__UserI__6EF57B66");
        });

        modelBuilder.Entity<DailyRoutineProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Daily_Ro__3214EC07F5CD4193");

            entity.ToTable("Daily_Routine_Products");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.DailyRoutine).WithMany(p => p.DailyRoutineProducts)
                .HasForeignKey(d => d.DailyRoutineId)
                .HasConstraintName("FK__Daily_Rou__Daily__02FC7413");

            entity.HasOne(d => d.Product).WithMany(p => p.DailyRoutineProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Daily_Rou__Produ__03F0984C");
        });

        modelBuilder.Entity<PaymentLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payment___3214EC07C4E47CA8");

            entity.ToTable("Payment_Logs");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TransactionId)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VippackageId).HasColumnName("VIPPackageId");

            entity.HasOne(d => d.User).WithMany(p => p.PaymentLogs)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Payment_L__UserI__619B8048");

            entity.HasOne(d => d.Vippackage).WithMany(p => p.PaymentLogs)
                .HasForeignKey(d => d.VippackageId)
                .HasConstraintName("FK__Payment_L__VIPPa__628FA481");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product___3214EC07708B85AA");

            entity.ToTable("Product_Categories");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product___3214EC079BC6F1E6");

            entity.ToTable("Product_Category_Mappings");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.ProductCategoryMappings)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Product_C__Categ__14270015");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductCategoryMappings)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Product_C__Produ__1332DBDC");
        });

        modelBuilder.Entity<SuggestedProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Suggeste__3214EC077274336B");

            entity.ToTable("Suggested_Products");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ImageLink).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ProductLink).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TempUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TempUser__3214EC07EC2E8437");

            entity.HasIndex(e => e.Email, "UQ__TempUser__A9D10534B881F96A").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Otp)
                .IsRequired()
                .HasMaxLength(6)
                .HasColumnName("OTP");
            entity.Property(e => e.Otpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("OTPExpiration");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("User");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC0778953521");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534AA1CCAB1").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<UserVip>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.VippackageId }).HasName("PK__User_VIP__5AA3A358CD580506");

            entity.ToTable("User_VIP");

            entity.Property(e => e.VippackageId).HasColumnName("VIPPackageId");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.UserVips)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_VIP__UserId__5BE2A6F2");

            entity.HasOne(d => d.Vippackage).WithMany(p => p.UserVips)
                .HasForeignKey(d => d.VippackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_VIP__VIPPac__5CD6CB2B");
        });

        modelBuilder.Entity<VipPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIP_Pack__3214EC07CE1B4DA8");

            entity.ToTable("VIP_Packages");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}